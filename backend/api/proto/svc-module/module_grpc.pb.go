// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/svc-module/module.proto

package svc_module

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ModuleServiceClient is the client API for ModuleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModuleServiceClient interface {
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	AddLessonToCreatedModule(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error)
	SetFileForModule(ctx context.Context, in *FileForModuleRequest, opts ...grpc.CallOption) (*FileForModuleResponse, error)
	GetListOfModules(ctx context.Context, in *ListOfModulesRequest, opts ...grpc.CallOption) (*ListOfModulesResponse, error)
	GetModuleByID(ctx context.Context, in *ModuleDataRequest, opts ...grpc.CallOption) (*ModuleDataResponse, error)
	SaveModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error)
	SaveLessons(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error)
}

type moduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModuleServiceClient(cc grpc.ClientConnInterface) ModuleServiceClient {
	return &moduleServiceClient{cc}
}

func (c *moduleServiceClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/CreateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) AddLessonToCreatedModule(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error) {
	out := new(AddLessonResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/AddLessonToCreatedModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) SetFileForModule(ctx context.Context, in *FileForModuleRequest, opts ...grpc.CallOption) (*FileForModuleResponse, error) {
	out := new(FileForModuleResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/SetFileForModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetListOfModules(ctx context.Context, in *ListOfModulesRequest, opts ...grpc.CallOption) (*ListOfModulesResponse, error) {
	out := new(ListOfModulesResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/GetListOfModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) GetModuleByID(ctx context.Context, in *ModuleDataRequest, opts ...grpc.CallOption) (*ModuleDataResponse, error) {
	out := new(ModuleDataResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/GetModuleByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) SaveModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*CreateModuleResponse, error) {
	out := new(CreateModuleResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/SaveModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moduleServiceClient) SaveLessons(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error) {
	out := new(AddLessonResponse)
	err := c.cc.Invoke(ctx, "/module.ModuleService/SaveLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModuleServiceServer is the server API for ModuleService service.
// All implementations must embed UnimplementedModuleServiceServer
// for forward compatibility
type ModuleServiceServer interface {
	CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	AddLessonToCreatedModule(context.Context, *AddLessonRequest) (*AddLessonResponse, error)
	SetFileForModule(context.Context, *FileForModuleRequest) (*FileForModuleResponse, error)
	GetListOfModules(context.Context, *ListOfModulesRequest) (*ListOfModulesResponse, error)
	GetModuleByID(context.Context, *ModuleDataRequest) (*ModuleDataResponse, error)
	SaveModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error)
	SaveLessons(context.Context, *AddLessonRequest) (*AddLessonResponse, error)
	mustEmbedUnimplementedModuleServiceServer()
}

// UnimplementedModuleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModuleServiceServer struct {
}

func (UnimplementedModuleServiceServer) CreateModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedModuleServiceServer) AddLessonToCreatedModule(context.Context, *AddLessonRequest) (*AddLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLessonToCreatedModule not implemented")
}
func (UnimplementedModuleServiceServer) SetFileForModule(context.Context, *FileForModuleRequest) (*FileForModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileForModule not implemented")
}
func (UnimplementedModuleServiceServer) GetListOfModules(context.Context, *ListOfModulesRequest) (*ListOfModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfModules not implemented")
}
func (UnimplementedModuleServiceServer) GetModuleByID(context.Context, *ModuleDataRequest) (*ModuleDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModuleByID not implemented")
}
func (UnimplementedModuleServiceServer) SaveModule(context.Context, *CreateModuleRequest) (*CreateModuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveModule not implemented")
}
func (UnimplementedModuleServiceServer) SaveLessons(context.Context, *AddLessonRequest) (*AddLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLessons not implemented")
}
func (UnimplementedModuleServiceServer) mustEmbedUnimplementedModuleServiceServer() {}

// UnsafeModuleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModuleServiceServer will
// result in compilation errors.
type UnsafeModuleServiceServer interface {
	mustEmbedUnimplementedModuleServiceServer()
}

func RegisterModuleServiceServer(s grpc.ServiceRegistrar, srv ModuleServiceServer) {
	s.RegisterService(&ModuleService_ServiceDesc, srv)
}

func _ModuleService_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/CreateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_AddLessonToCreatedModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).AddLessonToCreatedModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/AddLessonToCreatedModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).AddLessonToCreatedModule(ctx, req.(*AddLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_SetFileForModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileForModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).SetFileForModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/SetFileForModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).SetFileForModule(ctx, req.(*FileForModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetListOfModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOfModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetListOfModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/GetListOfModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetListOfModules(ctx, req.(*ListOfModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_GetModuleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).GetModuleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/GetModuleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).GetModuleByID(ctx, req.(*ModuleDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_SaveModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).SaveModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/SaveModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).SaveModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModuleService_SaveLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModuleServiceServer).SaveLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/module.ModuleService/SaveLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModuleServiceServer).SaveLessons(ctx, req.(*AddLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ModuleService_ServiceDesc is the grpc.ServiceDesc for ModuleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModuleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "module.ModuleService",
	HandlerType: (*ModuleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateModule",
			Handler:    _ModuleService_CreateModule_Handler,
		},
		{
			MethodName: "AddLessonToCreatedModule",
			Handler:    _ModuleService_AddLessonToCreatedModule_Handler,
		},
		{
			MethodName: "SetFileForModule",
			Handler:    _ModuleService_SetFileForModule_Handler,
		},
		{
			MethodName: "GetListOfModules",
			Handler:    _ModuleService_GetListOfModules_Handler,
		},
		{
			MethodName: "GetModuleByID",
			Handler:    _ModuleService_GetModuleByID_Handler,
		},
		{
			MethodName: "SaveModule",
			Handler:    _ModuleService_SaveModule_Handler,
		},
		{
			MethodName: "SaveLessons",
			Handler:    _ModuleService_SaveLessons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/svc-module/module.proto",
}
