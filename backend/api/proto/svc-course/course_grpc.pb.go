// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/proto/svc-course/course.proto

package svc_course

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseServiceClient interface {
	CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	AddLessonToCreatedCourse(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error)
	SetFileForCourse(ctx context.Context, in *FileForCourseRequest, opts ...grpc.CallOption) (*FileForCourseResponse, error)
	GetListOfCourses(ctx context.Context, in *ListOfCoursesRequest, opts ...grpc.CallOption) (*ListOfCoursesResponse, error)
	GetCourseByID(ctx context.Context, in *CourseDataRequest, opts ...grpc.CallOption) (*CourseDataResponse, error)
	SaveCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error)
	SaveLessons(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) CreateCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/CreateCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) AddLessonToCreatedCourse(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error) {
	out := new(AddLessonResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/AddLessonToCreatedCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) SetFileForCourse(ctx context.Context, in *FileForCourseRequest, opts ...grpc.CallOption) (*FileForCourseResponse, error) {
	out := new(FileForCourseResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/SetFileForCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetListOfCourses(ctx context.Context, in *ListOfCoursesRequest, opts ...grpc.CallOption) (*ListOfCoursesResponse, error) {
	out := new(ListOfCoursesResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetListOfCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) GetCourseByID(ctx context.Context, in *CourseDataRequest, opts ...grpc.CallOption) (*CourseDataResponse, error) {
	out := new(CourseDataResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/GetCourseByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) SaveCourse(ctx context.Context, in *CreateCourseRequest, opts ...grpc.CallOption) (*CreateCourseResponse, error) {
	out := new(CreateCourseResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/SaveCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) SaveLessons(ctx context.Context, in *AddLessonRequest, opts ...grpc.CallOption) (*AddLessonResponse, error) {
	out := new(AddLessonResponse)
	err := c.cc.Invoke(ctx, "/course.CourseService/SaveLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations must embed UnimplementedCourseServiceServer
// for forward compatibility
type CourseServiceServer interface {
	CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	AddLessonToCreatedCourse(context.Context, *AddLessonRequest) (*AddLessonResponse, error)
	SetFileForCourse(context.Context, *FileForCourseRequest) (*FileForCourseResponse, error)
	GetListOfCourses(context.Context, *ListOfCoursesRequest) (*ListOfCoursesResponse, error)
	GetCourseByID(context.Context, *CourseDataRequest) (*CourseDataResponse, error)
	SaveCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error)
	SaveLessons(context.Context, *AddLessonRequest) (*AddLessonResponse, error)
	mustEmbedUnimplementedCourseServiceServer()
}

// UnimplementedCourseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (UnimplementedCourseServiceServer) CreateCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourse not implemented")
}
func (UnimplementedCourseServiceServer) AddLessonToCreatedCourse(context.Context, *AddLessonRequest) (*AddLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLessonToCreatedCourse not implemented")
}
func (UnimplementedCourseServiceServer) SetFileForCourse(context.Context, *FileForCourseRequest) (*FileForCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFileForCourse not implemented")
}
func (UnimplementedCourseServiceServer) GetListOfCourses(context.Context, *ListOfCoursesRequest) (*ListOfCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfCourses not implemented")
}
func (UnimplementedCourseServiceServer) GetCourseByID(context.Context, *CourseDataRequest) (*CourseDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseByID not implemented")
}
func (UnimplementedCourseServiceServer) SaveCourse(context.Context, *CreateCourseRequest) (*CreateCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCourse not implemented")
}
func (UnimplementedCourseServiceServer) SaveLessons(context.Context, *AddLessonRequest) (*AddLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLessons not implemented")
}
func (UnimplementedCourseServiceServer) mustEmbedUnimplementedCourseServiceServer() {}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	s.RegisterService(&CourseService_ServiceDesc, srv)
}

func _CourseService_CreateCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/CreateCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_AddLessonToCreatedCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).AddLessonToCreatedCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/AddLessonToCreatedCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).AddLessonToCreatedCourse(ctx, req.(*AddLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_SetFileForCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileForCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).SetFileForCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/SetFileForCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).SetFileForCourse(ctx, req.(*FileForCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetListOfCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOfCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetListOfCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetListOfCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetListOfCourses(ctx, req.(*ListOfCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_GetCourseByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).GetCourseByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/GetCourseByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).GetCourseByID(ctx, req.(*CourseDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_SaveCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).SaveCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/SaveCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).SaveCourse(ctx, req.(*CreateCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_SaveLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).SaveLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/course.CourseService/SaveLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).SaveLessons(ctx, req.(*AddLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CourseService_ServiceDesc is the grpc.ServiceDesc for CourseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "course.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourse",
			Handler:    _CourseService_CreateCourse_Handler,
		},
		{
			MethodName: "AddLessonToCreatedCourse",
			Handler:    _CourseService_AddLessonToCreatedCourse_Handler,
		},
		{
			MethodName: "SetFileForCourse",
			Handler:    _CourseService_SetFileForCourse_Handler,
		},
		{
			MethodName: "GetListOfCourses",
			Handler:    _CourseService_GetListOfCourses_Handler,
		},
		{
			MethodName: "GetCourseByID",
			Handler:    _CourseService_GetCourseByID_Handler,
		},
		{
			MethodName: "SaveCourse",
			Handler:    _CourseService_SaveCourse_Handler,
		},
		{
			MethodName: "SaveLessons",
			Handler:    _CourseService_SaveLessons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/svc-course/course.proto",
}
